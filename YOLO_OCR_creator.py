# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'YOLO_OCR_creator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


CLIENT_SECRET_FILE  =  'your oath.json file'



import os
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QFileDialog


import pickle
import os
from google_auth_oauthlib.flow import Flow, InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
from google.auth.transport.requests import Request
from youtube_transcript_api import YouTubeTranscriptApi
import youtube_transcript_api



def Create_Service(client_secret_file, api_name, api_version, *scopes):
    print(client_secret_file, api_name, api_version, scopes, sep='-')
    CLIENT_SECRET_FILE = client_secret_file
    API_SERVICE_NAME = api_name
    API_VERSION = api_version
    SCOPES = [scope for scope in scopes[0]]
    print(SCOPES)

    cred = None

    pickle_file = f'token_{API_SERVICE_NAME}_{API_VERSION}.pickle'
    # print(pickle_file)

    if os.path.exists(pickle_file):
        with open(pickle_file, 'rb') as token:
            cred = pickle.load(token)

    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
            cred = flow.run_local_server()

        with open(pickle_file, 'wb') as token:
            pickle.dump(cred, token)

    try:
        service = build(API_SERVICE_NAME, API_VERSION, credentials=cred)
        print(API_SERVICE_NAME, 'service created successfully')
        return service
    except Exception as e:
        print('Unable to connect.')
        print(e)
        return None
    






from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(711, 451)
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(60, 200, 581, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color: rgb(244, 238, 229);\n"
"color: rgb(0, 0, 0);")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(60, 180, 571, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_2.setObjectName("label_2")
        self.ChooseFile = QtWidgets.QPushButton(Form)
        self.ChooseFile.setGeometry(QtCore.QRect(60, 236, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.ChooseFile.setFont(font)
        self.ChooseFile.setStyleSheet("QPushButton\n"
"                             {\n"
"                             background-color : rgb(244, 238, 229);\n"
"                        color: rgb(0, 0, 0);\n"
"                             }\n"
"                             QPushButton::pressed\n"
"                             {\n"
"                             background-color : rgb(241, 234, 222);\n"
"                        color: rgb(0, 0, 0);\n"
"                             }")
        self.ChooseFile.setObjectName("ChooseFile")
        self.Generate = QtWidgets.QPushButton(Form)
        self.Generate.setGeometry(QtCore.QRect(237, 236, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.Generate.setFont(font)
        self.Generate.setStyleSheet("QPushButton\n"
"                             {\n"
"                             background-color : rgb(244, 238, 229);\n"
"                        color: rgb(0, 0, 0);\n"
"                             }\n"
"                             QPushButton::pressed\n"
"                             {\n"
"                             background-color : rgb(241, 234, 222);\n"
"                        color: rgb(0, 0, 0);\n"
"                             }")
        self.Generate.setObjectName("Generate")
        self.Clear = QtWidgets.QPushButton(Form)
        self.Clear.setGeometry(QtCore.QRect(344, 236, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.Clear.setFont(font)
        self.Clear.setStyleSheet("QPushButton\n"
"                             {\n"
"                             background-color : rgb(244, 238, 229);\n"
"                        color: rgb(0, 0, 0);\n"
"                             }\n"
"                             QPushButton::pressed\n"
"                             {\n"
"                             background-color : rgb(241, 234, 222);\n"
"                        color: rgb(0, 0, 0);\n"
"                             }")
        self.Clear.setObjectName("Clear")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(50, 170, 611, 103))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius: 3px;")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.background = QtWidgets.QLabel(Form)
        self.background.setGeometry(QtCore.QRect(0, 0, 711, 451))
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap("90.webp"))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(650, 170, 11, 103))
        self.label_8.setStyleSheet("background-color: rgb(99, 219, 255);\n"
"border-radius: 3px;")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.background.raise_()
        self.label_5.raise_()
        self.lineEdit_2.raise_()
        self.label_2.raise_()
        self.ChooseFile.raise_()
        self.Generate.raise_()
        self.Clear.raise_()
        self.label_8.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.ChooseFile.clicked.connect(self.get_youtube_file)
        self.Generate.clicked.connect(self.youtube_generate)
        self.Clear.clicked.connect(self.clear_youtube)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Youtube Playlist Speech Recognition"))
        self.label_2.setText(_translate("Form", "Generate Video Transcript"))
        self.ChooseFile.setText(_translate("Form", "Choose Playlist File"))
        self.Generate.setText(_translate("Form", "Generate"))
        self.Clear.setText(_translate("Form", "Clear"))


    def clear_youtube(self):
        self.lineEdit_2.clear()


    def get_youtube_file(self):
        folderpath = QFileDialog.getOpenFileName(Form, 'Source Text', '', 'Text files (*.txt)')
        print(folderpath)
        self.lineEdit_2.setText(folderpath[0])
        pass
    

    def youtube_generate(self):
        filepath = self.lineEdit_2.text()
        print(filepath)



        print(os.path.dirname(filepath))
        with open(filepath, "r") as file:
            content = file.readlines()
            file.close()

            
        if len(content) != 1:
            print("no")

        else:

            # CLIENT_SECRET_FILE  =  ".json"
            API_NAME  =  'youtube'
            API_VERSION  =  'v3'
            SCOPES  = ['https://www.googleapis.com/auth/youtube']

            service =  Create_Service(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)



            # print(os.path.dirname(filepath))
            # with open(filepath, "r") as file:
            #     content = file.readlines()
            #     file.close()

            playlistId_Source = content[-1]
            print("ID", content[-1])
            # response = service.playlistItems().list(
            #     part='contentDetails',
            #     playlistId=playlistId_Source,
            #     maxResults=100
            # ).execute()

            # playlistItems = response['items']
            # nextPageToken = response.get('nextPageToken')



            response = service.playlistItems().list(
                part='contentDetails',
                playlistId=playlistId_Source,
                maxResults=50
            ).execute()

            playlistItems = response['items']
            nextPageToken = response.get('nextPageToken')

            while nextPageToken:
                response = service.playlistItems().list(
                    part='contentDetails',
                    playlistId=playlistId_Source,
                    maxResults=50,
                    pageToken=nextPageToken
                ).execute()

                playlistItems.extend(response['items'])
                nextPageToken = response.get('nextPageToken')

            print(playlistItems)




            # print(playlistItems)

            def get_transcrpt_text(videoId):
                # videoId = playlistItems[0]['contentDetails']['videoId']
                # url = f"https://www.youtube.com/watch?v={videoId}"
                try:
                    ans = YouTubeTranscriptApi.get_transcript(videoId)
                    results = []
                    for i in ans:
                        # print(i['text'])
                        results.append(i['text'])

                    transcript = " ".join(results).replace("\n", " ")
                except youtube_transcript_api._errors.NoTranscriptFound:
                    transcript = "No trascrpt"
                except youtube_transcript_api._errors.TranscriptsDisabled:
                    transcript = "Transcrpts Disabled"

                return transcript


            with open(f"{os.path.dirname(filepath)}/YOUTUBE.txt", "w") as file:
                for i in playlistItems:
                    # print(i['contentDetails']['videoId'])
                    print(f"https://www.youtube.com/watch?v={i['contentDetails']['videoId']}")
                    videoId = i['contentDetails']['videoId']
                    append_to_file = f"https://www.youtube.com/watch?v={videoId} <break> {get_transcrpt_text(videoId)}" +"\n"
                    file.write(append_to_file)

                file.truncate(file.tell()-1)
                file.close()
        
        print("Finished Transcribing Playlist")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
